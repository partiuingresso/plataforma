import './ticket_manager.scss'
import Rails from 'rails-ujs'
import ConfirmDialog from '../confirm_dialog.vue'
import TicketForm from '../ticket_form.vue'
export default {
	components: {
		'confirm-dialog': ConfirmDialog,
		'ticket-form': TicketForm
	},
	template: `<%= ERB.new(File.read(Rails.root.join('app', 'frontend', 'components', 'ticket_manager', '_ticket_manager.html.erb'))).result %>`,
	props: ['offers_data'],
	data() {
		return {
			offers: [],
			availableFilter: true,
			ticketFormVisible: false,
			confirmDialogVisible: false,
			selectedOffer: null,
			ticketFree: false
		}
	},
	created() {
		this.offers = JSON.parse(this.offers_data).data
			.map(obj => Object.assign({id: obj.id}, obj.attributes))
	},
	methods: {
		setAvailableFilter(available) {
			this.availableFilter = available
		},
		newOffer(type) {
			if(type === 'costly') {
				this.ticketFree = false
				this.setTicketFormVisible()
			} else {
				this.ticketFree = true
				this.setTicketFormVisible()
			}
		},
		editOffer(offer) {
			this.selectedOffer = offer
			this.ticketFree = offer.price.amount === 0
			this.setTicketFormVisible()
		},
		ticketFormClosed() {
			this.setTicketFormVisible(false)
			this.selectedOffer = null
		},
		confirmOfferDeletion(offer) {
			this.selectedOffer = offer
			this.setConfirmDialogVisible()
		},
		dialogConfirmed() {
			this.setConfirmDialogVisible(false)
			this.deleteOffer()
		},
		confirmDialogClosed() {
			this.setConfirmDialogVisible(false)
			this.selectedOffer = null
		},
		async deleteOffer() {
			Rails.ajax({
				url: `/offers/${this.selectedOffer.id}`,
				type: 'delete',
				data: '',
				success: this.successfulOfferDeletion,
				error: this.offerDeletionError
			})
		},
		successfulOfferDeletion() {
			this.$delete(this.offers, this.offers.indexOf(this.selectedOffer))
			bulmaToast.toast(
				{
					message: 'Ingresso removido com sucesso.',
					type: 'is-success',
					dismissible: true,
					duration: 10000,
					pauseOnHover: true,
					animate: { in: 'bounceInRight', out: 'bounceOutRight' }
				}
			)
			this.selectedOffer = null
		},
		offerDeletionError() {
			bulmaToast.toast(
				{
					message: 'Não foi possível remover esse ingresso.',
					type: 'is-danger',
					dismissible: true,
					duration: 10000,
					pauseOnHover: true,
					animate: { in: 'bounceInRight', out: 'bounceOutRight' }
				}
			)
			this.selectedOffer = null
		},
		setConfirmDialogVisible(visible=true) {
			this.confirmDialogVisible = visible
		},
		setTicketFormVisible(visible=true) {
			this.ticketFormVisible = visible
		}
	},
	computed: {
		filteredItems() {
			return this.offers.filter(item => item.available === this.availableFilter)
		},
		confirmMessage() {
			return `Tem certeza que deseja remover o ingresso <b>${this.selectedOffer.name}</b>?`
		}
	}
}
